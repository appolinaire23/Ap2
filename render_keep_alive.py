"""
Syst√®me de maintien d'activit√© sp√©cifique √† Render.com
G√®re la communication Render ‚Üî Replit et le r√©veil automatique
"""

import asyncio
import logging
import aiohttp
import time
from datetime import datetime, timedelta

logger = logging.getLogger(__name__)

class RenderKeepAliveSystem:
    """Syst√®me de maintien d'activit√© pour Render avec communication Replit"""
    
    def __init__(self, bot_client, admin_id):
        self.bot_client = bot_client
        self.admin_id = admin_id
        self.is_running = False
        self.last_activity = time.time()
        self.replit_url = "https://telefeed-bot.kouamappoloak.repl.co"
        self.render_url = f"https://telefeed-bot-render.onrender.com"  # URL Render g√©n√©rique
        
    async def start_render_keep_alive(self):
        """D√©marrer le syst√®me de maintien d'activit√© Render"""
        if self.is_running:
            return
            
        self.is_running = True
        logger.info("üåê D√©marrage du syst√®me Render keep-alive")
        
        # D√©marrer les t√¢ches en parall√®le
        tasks = [
            self.monitor_render_activity(),
            self.monitor_replit_communication(),
            self.periodic_render_health_check()
        ]
        
        await asyncio.gather(*tasks, return_exceptions=True)
    
    async def notify_deployment_success(self):
        """Notifie le succ√®s du d√©ploiement Render"""
        try:
            message = f"""
üåê **D√âPLOIEMENT RENDER.COM R√âUSSI !**

üéâ **TeleFeed Bot d√©ploy√© avec succ√®s sur Render.com**

üìã **D√©tails du d√©ploiement :**
‚Ä¢ Plateforme : Render.com
‚Ä¢ Status : ‚úÖ En ligne
‚Ä¢ Communication automatique : ‚úÖ Active
‚Ä¢ Syst√®me keep-alive : ‚úÖ Op√©rationnel

üîó **Communication automatique :**
‚Ä¢ Render ‚Üî Replit : Active
‚Ä¢ Notifications automatiques : Activ√©es
‚Ä¢ Pas de messages "r√©veil toi" : ‚úÖ

‚è∞ **D√©ploy√© le :** {datetime.now().strftime('%d/%m/%Y √† %H:%M:%S')}

üöÄ **Le bot est maintenant h√©berg√© sur Render.com !**
            """
            
            await self.bot_client.send_message(self.admin_id, message)
            logger.info("‚úÖ Notification de d√©ploiement Render envoy√©e")
            
        except Exception as e:
            logger.error(f"Erreur notification d√©ploiement Render: {e}")
    
    async def notify_replit_server(self):
        """Notifie le serveur Replit du d√©ploiement Render"""
        try:
            async with aiohttp.ClientSession() as session:
                data = {
                    "platform": "render",
                    "status": "deployed",
                    "timestamp": datetime.now().isoformat(),
                    "url": self.render_url
                }
                
                async with session.post(f"{self.replit_url}/render_notification", json=data, timeout=10) as response:
                    if response.status == 200:
                        logger.info("‚úÖ Serveur Replit notifi√© du d√©ploiement Render")
                    
        except Exception as e:
            logger.error(f"Erreur notification Replit: {e}")
    
    async def monitor_render_activity(self):
        """Surveiller l'activit√© Render et r√©veiller si n√©cessaire"""
        while self.is_running:
            try:
                # V√©rifier si Render est inactif depuis plus de 5 minutes
                if time.time() - self.last_activity > 300:  # 5 minutes
                    await self.wake_up_render()
                
                await asyncio.sleep(180)  # V√©rifier toutes les 3 minutes
                
            except Exception as e:
                logger.error(f"Erreur monitoring Render: {e}")
                await asyncio.sleep(60)
    
    async def monitor_replit_communication(self):
        """Surveiller la communication avec Replit et r√©veiller si n√©cessaire"""
        while self.is_running:
            try:
                # Tester la connectivit√© Replit
                replit_ok = await self.test_replit_connectivity()
                
                if not replit_ok:
                    await self.wake_up_replit_from_render()
                
                await asyncio.sleep(240)  # V√©rifier toutes les 4 minutes
                
            except Exception as e:
                logger.error(f"Erreur communication Replit: {e}")
                await asyncio.sleep(120)
    
    async def test_replit_connectivity(self):
        """Teste si le serveur Replit r√©pond"""
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(f"{self.replit_url}/ping", timeout=10) as response:
                    return response.status == 200
                    
        except Exception:
            return False
    
    async def wake_up_replit_from_render(self):
        """R√©veille le serveur Replit depuis Render"""
        try:
            async with aiohttp.ClientSession() as session:
                data = {"source": "render", "timestamp": datetime.now().isoformat()}
                
                async with session.post(f"{self.replit_url}/wake_up", json=data, timeout=15) as response:
                    if response.status == 200:
                        logger.info("üîÑ Replit r√©veill√© depuis Render")
                        
        except Exception as e:
            logger.error(f"Erreur r√©veil Replit: {e}")
    
    async def wake_up_render(self):
        """Auto-r√©veil de Render"""
        try:
            self.update_activity()
            logger.info("üîÑ Auto-r√©veil Render effectu√©")
            
        except Exception as e:
            logger.error(f"Erreur auto-r√©veil Render: {e}")
    
    async def periodic_render_health_check(self):
        """V√©rification p√©riodique de sant√© Render"""
        while self.is_running:
            try:
                # Mise √† jour de l'activit√© pour indiquer que Render fonctionne
                self.update_activity()
                
                # Log de sant√© toutes les 10 minutes
                if int(time.time()) % 600 == 0:
                    logger.info(f"üåê Render health check - Status: OK - {datetime.now().strftime('%H:%M:%S')}")
                
                await asyncio.sleep(60)  # Check toutes les minutes
                
            except Exception as e:
                logger.error(f"Erreur health check Render: {e}")
                await asyncio.sleep(120)
    
    def update_activity(self):
        """Met √† jour l'activit√© Render"""
        self.last_activity = time.time()
    
    def stop_render_keep_alive(self):
        """Arr√™ter le syst√®me de maintien d'activit√© Render"""
        self.is_running = False
        logger.info("üåê Syst√®me Render keep-alive arr√™t√©")
    
    def get_render_status(self):
        """Obtenir le statut du syst√®me Render"""
        uptime = time.time() - self.last_activity
        return {
            "platform": "render",
            "status": "running" if self.is_running else "stopped",
            "last_activity": self.last_activity,
            "uptime_seconds": uptime,
            "replit_url": self.replit_url
        }